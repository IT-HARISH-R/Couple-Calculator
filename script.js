const startBtn = document.getElementById("startBtn");
const btnText = document.querySelector(".btn-text");
const listeningText = document.querySelector(".listening-text");
const micIndicator = document.getElementById("mic-indicator");
const expressionEl = document.getElementById("expression");
const resultEl = document.getElementById("result");

startBtn.addEventListener("click", () => {
    const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = "ta-IN"; // Tamil + English recognition
    recognition.start();

    console.log("üé§ Listening...");

    // Switch to listening animation
    btnText.style.opacity = "0";
    listeningText.style.opacity = "1";
    micIndicator.classList.remove("hidden", "speaking"); // remove speaking
    micIndicator.classList.add("listening"); // waves active

    recognition.onend = () => {
        console.log("üõë Stopped listening");
        btnText.style.opacity = "1";
        listeningText.style.opacity = "0";
        // If not speaking, hide
        if (!micIndicator.classList.contains("speaking")) {
            micIndicator.classList.add("hidden");
        }
    };

    recognition.onresult = (event) => {
        let voiceText = event.results[0][0].transcript.toLowerCase();
        console.log("üé§ Voice Input:", voiceText);

        // Clean filler words
        voiceText = voiceText
            .replace(/‡ÆÖ‡Æ™‡Øç‡Æ™‡ØÅ‡Æ±‡ÆÆ‡Øç|‡Æ™‡Æø‡Æ±‡Æï‡ØÅ|‡Æé‡Æ©‡Øç‡Æ±‡ØÅ|‡Æö‡Øä‡Æ©‡Øç‡Æ©‡Øá‡Æ©‡Øç|‡Æµ‡Æø‡Æü‡Øà|answer|then|after/gi, "")
            .trim();

        // Convert to math expression
        let exp = voiceText
            .replace(/plus|add|addition/gi, "+")
            .replace(/minus|subtract|subtraction|less/gi, "-")
            .replace(/times|into|multiply|multiplication|product/gi, "*")
            .replace(/divide|by|division|over/gi, "/")
            .replace(/‡Æï‡ØÇ‡Æü‡Øç‡Æü‡ØÅ|‡Æï‡ØÇ‡Æü‡Øç‡Æü‡Æ≤‡Øç|‡Æö‡Øá‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡ØÅ|‡Æ™‡Æø‡Æ≥‡Æ∏‡Øç|‡ÆÜ‡Æü‡Øç|‡Æö‡ÆÆ‡Øç‡ÆÆ‡Øá‡Æö‡Øç‡Æö‡ØÅ/gi, "+")
            .replace(/‡Æï‡Æ¥‡Æø|‡Æï‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æ≤‡Øç|‡ÆÆ‡Øà‡Æ©‡Æ∏‡Øç|‡Æï‡ØÅ‡Æ±‡Øà‡Æ§‡Øç‡Æ§‡Æ≤‡Øç|‡Æï‡ÆÆ‡Øç‡ÆÆ‡Æø|‡Æï‡Æ¥‡Æø‡Æö‡Øç‡Æö‡ØÅ/gi, "-")
            .replace(/‡Æ™‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ|‡ÆÆ‡Æü‡Æï‡Øç‡Æï‡ØÅ|‡Æá‡Æ©‡Øç‡Æü‡ØÅ|‡ÆÆ‡Æü‡Æô‡Øç‡Æï‡Ææ‡Æï|‡Æ™‡Øç‡Æ∞‡Ææ‡Æü‡Æï‡Øç‡Æü‡Øç|‡Æ™‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æ≤‡Øç/gi, "*")
            .replace(/‡Æµ‡Æï‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ|‡Æµ‡Æï‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≤‡Øç|‡Æµ‡Æï‡ØÅ‡Æï‡Øç‡Æï|‡Æü‡Æø‡Æµ‡Øà‡Æü‡Æü‡Øç|‡Æ™‡Æô‡Øç‡Æï‡Æø‡Æü‡Øç‡Æü‡ØÅ|‡Æ™‡Æï‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≤‡Øç/gi, "/");

        expressionEl.textContent = `Expression ${exp}`;

        try {
            const validPattern = /^[0-9+\-*/().\s]+$/;
            if (validPattern.test(exp)) {
                const ans = eval(exp);
                resultEl.textContent = `Result: ${ans}`;

                // üîä Switch to speaking animation
                micIndicator.classList.remove("listening");
                micIndicator.classList.add("speaking");

                // Speak result
                const synth = window.speechSynthesis;
                const utter = new SpeechSynthesisUtterance(`The answer is ${ans}`);
                utter.lang = "ta-IN";
                synth.speak(utter);

                utter.onend = () => {
                    console.log("‚úÖ Finished speaking");
                    micIndicator.classList.remove("speaking");
                    micIndicator.classList.add("hidden"); // hide after speaking
                };
            } else {
                console.warn("‚ùå Invalid string detected...");
                resultEl.textContent = "‚ùå Invalid Expression";
            }
        } catch (error) {
            console.error("‚ö†Ô∏è Error evaluating:", error);
            resultEl.textContent = "‚ö†Ô∏è Error in calculation";
        }
    };
});
